pipeline {
    agent any

    environment {
        // Define environment variables as needed
        DOCKER_HUB_REPO = 'aluzun' // Replace with your Docker Hub repository name
        DOCKER_IMAGE_NAME = 'mail-sender' // Image Name
        DOCKER_IMAGE_TAG = 'latest' // You can use a specific tag if needed
    }

    stages {

        stage('Checkout') {
            steps {
                // Checkout your code from the GitHub repository
                checkout([$class: 'GitSCM', branches: [[name: '*/jenkins']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/Aluzun/Spring-Boot-MailSender.git']]])
            }
        }
        
        stage('Maven Install') {
			steps {
			    tool name: 'maven-3.9.4', type: 'maven'
			    sh 'mvn -v'
			    //echo 'Building....'
			    //sh 'mvn -f ./springboot-mail-app/pom.xml clean install'
			}
        }

        stage('Build') {
            steps {
                // Build your Maven project
                sh 'mvn -f ./springboot-mail-app/pom.xml clean install'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                // Build a Docker image from your project
                sh 'docker build -t $DOCKER_HUB_REPO/$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG ./springboot-mail-app/ '
            }
        }

        stage('Push to Docker Hub') {
            steps {
                // Authenticate with Docker Hub
                withCredentials([usernamePassword(credentialsId: 'dockerHub', usernameVariable: 'dockerHubUser', passwordVariable: 'dockerHubPassword')]) {
                    sh "docker login -u $dockerHubUser -p $dockerHubPassword"
                }

                // Push the Docker image to Docker Hub
                sh "docker push $DOCKER_HUB_REPO/$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG"
            }
        }
    }

    post {
        always {
            // Clean up
            sh 'docker logout'
        }
    }
}
